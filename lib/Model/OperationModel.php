<?php
/**
 * OperationModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * QuickPay
 *
 * QuickPay client to capture and refund payments
 *
 * OpenAPI spec version: v10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * OperationModel Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OperationModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OperationModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'type' => 'string',
        'amount' => 'float',
        'pending' => 'bool',
        'qp_status_code' => 'string',
        'qp_status_msg' => 'string',
        'aq_status_code' => 'string',
        'aq_status_msg' => 'string',
        'data' => 'string',
        'callback_url' => 'string',
        'callback_success' => 'bool',
        'callback_response_code' => 'bool',
        'callback_duration' => 'int',
        'acquirer' => 'string',
        'callback_at' => 'string',
        'created_at' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'amount' => 'amount',
        'pending' => 'pending',
        'qp_status_code' => 'qp_status_code',
        'qp_status_msg' => 'qp_status_msg',
        'aq_status_code' => 'aq_status_code',
        'aq_status_msg' => 'aq_status_msg',
        'data' => 'data',
        'callback_url' => 'callback_url',
        'callback_success' => 'callback_success',
        'callback_response_code' => 'callback_response_code',
        'callback_duration' => 'callback_duration',
        'acquirer' => 'acquirer',
        'callback_at' => 'callback_at',
        'created_at' => 'created_at'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'amount' => 'setAmount',
        'pending' => 'setPending',
        'qp_status_code' => 'setQpStatusCode',
        'qp_status_msg' => 'setQpStatusMsg',
        'aq_status_code' => 'setAqStatusCode',
        'aq_status_msg' => 'setAqStatusMsg',
        'data' => 'setData',
        'callback_url' => 'setCallbackUrl',
        'callback_success' => 'setCallbackSuccess',
        'callback_response_code' => 'setCallbackResponseCode',
        'callback_duration' => 'setCallbackDuration',
        'acquirer' => 'setAcquirer',
        'callback_at' => 'setCallbackAt',
        'created_at' => 'setCreatedAt'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'amount' => 'getAmount',
        'pending' => 'getPending',
        'qp_status_code' => 'getQpStatusCode',
        'qp_status_msg' => 'getQpStatusMsg',
        'aq_status_code' => 'getAqStatusCode',
        'aq_status_msg' => 'getAqStatusMsg',
        'data' => 'getData',
        'callback_url' => 'getCallbackUrl',
        'callback_success' => 'getCallbackSuccess',
        'callback_response_code' => 'getCallbackResponseCode',
        'callback_duration' => 'getCallbackDuration',
        'acquirer' => 'getAcquirer',
        'callback_at' => 'getCallbackAt',
        'created_at' => 'getCreatedAt'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['pending'] = isset($data['pending']) ? $data['pending'] : null;
        $this->container['qp_status_code'] = isset($data['qp_status_code']) ? $data['qp_status_code'] : null;
        $this->container['qp_status_msg'] = isset($data['qp_status_msg']) ? $data['qp_status_msg'] : null;
        $this->container['aq_status_code'] = isset($data['aq_status_code']) ? $data['aq_status_code'] : null;
        $this->container['aq_status_msg'] = isset($data['aq_status_msg']) ? $data['aq_status_msg'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['callback_url'] = isset($data['callback_url']) ? $data['callback_url'] : null;
        $this->container['callback_success'] = isset($data['callback_success']) ? $data['callback_success'] : null;
        $this->container['callback_response_code'] = isset($data['callback_response_code']) ? $data['callback_response_code'] : null;
        $this->container['callback_duration'] = isset($data['callback_duration']) ? $data['callback_duration'] : null;
        $this->container['acquirer'] = isset($data['acquirer']) ? $data['acquirer'] : null;
        $this->container['callback_at'] = isset($data['callback_at']) ? $data['callback_at'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets amount
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param float $amount
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets pending
     * @return bool
     */
    public function getPending()
    {
        return $this->container['pending'];
    }

    /**
     * Sets pending
     * @param bool $pending
     * @return $this
     */
    public function setPending($pending)
    {
        $this->container['pending'] = $pending;

        return $this;
    }

    /**
     * Gets qp_status_code
     * @return string
     */
    public function getQpStatusCode()
    {
        return $this->container['qp_status_code'];
    }

    /**
     * Sets qp_status_code
     * @param string $qp_status_code
     * @return $this
     */
    public function setQpStatusCode($qp_status_code)
    {
        $this->container['qp_status_code'] = $qp_status_code;

        return $this;
    }

    /**
     * Gets qp_status_msg
     * @return string
     */
    public function getQpStatusMsg()
    {
        return $this->container['qp_status_msg'];
    }

    /**
     * Sets qp_status_msg
     * @param string $qp_status_msg
     * @return $this
     */
    public function setQpStatusMsg($qp_status_msg)
    {
        $this->container['qp_status_msg'] = $qp_status_msg;

        return $this;
    }

    /**
     * Gets aq_status_code
     * @return string
     */
    public function getAqStatusCode()
    {
        return $this->container['aq_status_code'];
    }

    /**
     * Sets aq_status_code
     * @param string $aq_status_code
     * @return $this
     */
    public function setAqStatusCode($aq_status_code)
    {
        $this->container['aq_status_code'] = $aq_status_code;

        return $this;
    }

    /**
     * Gets aq_status_msg
     * @return string
     */
    public function getAqStatusMsg()
    {
        return $this->container['aq_status_msg'];
    }

    /**
     * Sets aq_status_msg
     * @param string $aq_status_msg
     * @return $this
     */
    public function setAqStatusMsg($aq_status_msg)
    {
        $this->container['aq_status_msg'] = $aq_status_msg;

        return $this;
    }

    /**
     * Gets data
     * @return string
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     * @param string $data
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets callback_url
     * @return string
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     * @param string $callback_url
     * @return $this
     */
    public function setCallbackUrl($callback_url)
    {
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets callback_success
     * @return bool
     */
    public function getCallbackSuccess()
    {
        return $this->container['callback_success'];
    }

    /**
     * Sets callback_success
     * @param bool $callback_success
     * @return $this
     */
    public function setCallbackSuccess($callback_success)
    {
        $this->container['callback_success'] = $callback_success;

        return $this;
    }

    /**
     * Gets callback_response_code
     * @return bool
     */
    public function getCallbackResponseCode()
    {
        return $this->container['callback_response_code'];
    }

    /**
     * Sets callback_response_code
     * @param bool $callback_response_code
     * @return $this
     */
    public function setCallbackResponseCode($callback_response_code)
    {
        $this->container['callback_response_code'] = $callback_response_code;

        return $this;
    }

    /**
     * Gets callback_duration
     * @return int
     */
    public function getCallbackDuration()
    {
        return $this->container['callback_duration'];
    }

    /**
     * Sets callback_duration
     * @param int $callback_duration
     * @return $this
     */
    public function setCallbackDuration($callback_duration)
    {
        $this->container['callback_duration'] = $callback_duration;

        return $this;
    }

    /**
     * Gets acquirer
     * @return string
     */
    public function getAcquirer()
    {
        return $this->container['acquirer'];
    }

    /**
     * Sets acquirer
     * @param string $acquirer
     * @return $this
     */
    public function setAcquirer($acquirer)
    {
        $this->container['acquirer'] = $acquirer;

        return $this;
    }

    /**
     * Gets callback_at
     * @return string
     */
    public function getCallbackAt()
    {
        return $this->container['callback_at'];
    }

    /**
     * Sets callback_at
     * @param string $callback_at ISO-8601 timestamp
     * @return $this
     */
    public function setCallbackAt($callback_at)
    {
        $this->container['callback_at'] = $callback_at;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at ISO-8601 timestamp
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
