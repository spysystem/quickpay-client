<?php
/**
 * MetadataModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * QuickPay
 *
 * QuickPay client to capture and refund payments
 *
 * OpenAPI spec version: v10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * MetadataModel Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MetadataModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'MetadataModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'state' => 'string',
        'origin' => 'string',
        'brand' => 'string',
        'bin' => 'string',
        'last4' => 'string',
        'exp_month' => 'int',
        'exp_year' => 'int',
        'country' => 'string',
        'is_3d_secure' => 'string',
        'issued_to' => 'string',
        'hash' => 'string',
        'number' => 'string',
        'customer_ip' => 'string',
        'customer_country' => 'string',
        'fraud_suspected' => 'bool',
        'fraud_remarks' => 'string[]',
        'nin_number' => 'string',
        'nin_country_code' => 'string',
        'nin_gender' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'state' => 'state',
        'origin' => 'origin',
        'brand' => 'brand',
        'bin' => 'bin',
        'last4' => 'last4',
        'exp_month' => 'exp_month',
        'exp_year' => 'exp_year',
        'country' => 'country',
        'is_3d_secure' => 'is_3d_Secure',
        'issued_to' => 'issued_to',
        'hash' => 'hash',
        'number' => 'number',
        'customer_ip' => 'customer_ip',
        'customer_country' => 'customer_country',
        'fraud_suspected' => 'fraud_suspected',
        'fraud_remarks' => 'fraud_remarks',
        'nin_number' => 'nin_number',
        'nin_country_code' => 'nin_country_code',
        'nin_gender' => 'nin_gender'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'state' => 'setState',
        'origin' => 'setOrigin',
        'brand' => 'setBrand',
        'bin' => 'setBin',
        'last4' => 'setLast4',
        'exp_month' => 'setExpMonth',
        'exp_year' => 'setExpYear',
        'country' => 'setCountry',
        'is_3d_secure' => 'setIs3dSecure',
        'issued_to' => 'setIssuedTo',
        'hash' => 'setHash',
        'number' => 'setNumber',
        'customer_ip' => 'setCustomerIp',
        'customer_country' => 'setCustomerCountry',
        'fraud_suspected' => 'setFraudSuspected',
        'fraud_remarks' => 'setFraudRemarks',
        'nin_number' => 'setNinNumber',
        'nin_country_code' => 'setNinCountryCode',
        'nin_gender' => 'setNinGender'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'state' => 'getState',
        'origin' => 'getOrigin',
        'brand' => 'getBrand',
        'bin' => 'getBin',
        'last4' => 'getLast4',
        'exp_month' => 'getExpMonth',
        'exp_year' => 'getExpYear',
        'country' => 'getCountry',
        'is_3d_secure' => 'getIs3dSecure',
        'issued_to' => 'getIssuedTo',
        'hash' => 'getHash',
        'number' => 'getNumber',
        'customer_ip' => 'getCustomerIp',
        'customer_country' => 'getCustomerCountry',
        'fraud_suspected' => 'getFraudSuspected',
        'fraud_remarks' => 'getFraudRemarks',
        'nin_number' => 'getNinNumber',
        'nin_country_code' => 'getNinCountryCode',
        'nin_gender' => 'getNinGender'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATE_CARD = 'card';
    const STATE_MOBILE = 'mobile';
    const STATE_NIN = 'nin';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_CARD,
            self::STATE_MOBILE,
            self::STATE_NIN,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['bin'] = isset($data['bin']) ? $data['bin'] : null;
        $this->container['last4'] = isset($data['last4']) ? $data['last4'] : null;
        $this->container['exp_month'] = isset($data['exp_month']) ? $data['exp_month'] : null;
        $this->container['exp_year'] = isset($data['exp_year']) ? $data['exp_year'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['is_3d_secure'] = isset($data['is_3d_secure']) ? $data['is_3d_secure'] : null;
        $this->container['issued_to'] = isset($data['issued_to']) ? $data['issued_to'] : null;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['customer_ip'] = isset($data['customer_ip']) ? $data['customer_ip'] : null;
        $this->container['customer_country'] = isset($data['customer_country']) ? $data['customer_country'] : null;
        $this->container['fraud_suspected'] = isset($data['fraud_suspected']) ? $data['fraud_suspected'] : null;
        $this->container['fraud_remarks'] = isset($data['fraud_remarks']) ? $data['fraud_remarks'] : null;
        $this->container['nin_number'] = isset($data['nin_number']) ? $data['nin_number'] : null;
        $this->container['nin_country_code'] = isset($data['nin_country_code']) ? $data['nin_country_code'] : null;
        $this->container['nin_gender'] = isset($data['nin_gender']) ? $data['nin_gender'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["card", "mobile", "nin"];
        if (!in_array($this->container['state'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'state', must be one of 'card', 'mobile', 'nin'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["card", "mobile", "nin"];
        if (!in_array($this->container['state'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state
     * @return $this
     */
    public function setState($state)
    {
        $allowed_values = array('card', 'mobile', 'nin');
        if (!is_null($state) && (!in_array($state, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'state', must be one of 'card', 'mobile', 'nin'");
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets origin
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     * @param string $origin
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets brand
     * @return string
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     * @param string $brand
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets bin
     * @return string
     */
    public function getBin()
    {
        return $this->container['bin'];
    }

    /**
     * Sets bin
     * @param string $bin
     * @return $this
     */
    public function setBin($bin)
    {
        $this->container['bin'] = $bin;

        return $this;
    }

    /**
     * Gets last4
     * @return string
     */
    public function getLast4()
    {
        return $this->container['last4'];
    }

    /**
     * Sets last4
     * @param string $last4
     * @return $this
     */
    public function setLast4($last4)
    {
        $this->container['last4'] = $last4;

        return $this;
    }

    /**
     * Gets exp_month
     * @return int
     */
    public function getExpMonth()
    {
        return $this->container['exp_month'];
    }

    /**
     * Sets exp_month
     * @param int $exp_month
     * @return $this
     */
    public function setExpMonth($exp_month)
    {
        $this->container['exp_month'] = $exp_month;

        return $this;
    }

    /**
     * Gets exp_year
     * @return int
     */
    public function getExpYear()
    {
        return $this->container['exp_year'];
    }

    /**
     * Sets exp_year
     * @param int $exp_year
     * @return $this
     */
    public function setExpYear($exp_year)
    {
        $this->container['exp_year'] = $exp_year;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets is_3d_secure
     * @return string
     */
    public function getIs3dSecure()
    {
        return $this->container['is_3d_secure'];
    }

    /**
     * Sets is_3d_secure
     * @param string $is_3d_secure
     * @return $this
     */
    public function setIs3dSecure($is_3d_secure)
    {
        $this->container['is_3d_secure'] = $is_3d_secure;

        return $this;
    }

    /**
     * Gets issued_to
     * @return string
     */
    public function getIssuedTo()
    {
        return $this->container['issued_to'];
    }

    /**
     * Sets issued_to
     * @param string $issued_to
     * @return $this
     */
    public function setIssuedTo($issued_to)
    {
        $this->container['issued_to'] = $issued_to;

        return $this;
    }

    /**
     * Gets hash
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     * @param string $hash
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets number
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     * @param string $number
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets customer_ip
     * @return string
     */
    public function getCustomerIp()
    {
        return $this->container['customer_ip'];
    }

    /**
     * Sets customer_ip
     * @param string $customer_ip
     * @return $this
     */
    public function setCustomerIp($customer_ip)
    {
        $this->container['customer_ip'] = $customer_ip;

        return $this;
    }

    /**
     * Gets customer_country
     * @return string
     */
    public function getCustomerCountry()
    {
        return $this->container['customer_country'];
    }

    /**
     * Sets customer_country
     * @param string $customer_country
     * @return $this
     */
    public function setCustomerCountry($customer_country)
    {
        $this->container['customer_country'] = $customer_country;

        return $this;
    }

    /**
     * Gets fraud_suspected
     * @return bool
     */
    public function getFraudSuspected()
    {
        return $this->container['fraud_suspected'];
    }

    /**
     * Sets fraud_suspected
     * @param bool $fraud_suspected
     * @return $this
     */
    public function setFraudSuspected($fraud_suspected)
    {
        $this->container['fraud_suspected'] = $fraud_suspected;

        return $this;
    }

    /**
     * Gets fraud_remarks
     * @return string[]
     */
    public function getFraudRemarks()
    {
        return $this->container['fraud_remarks'];
    }

    /**
     * Sets fraud_remarks
     * @param string[] $fraud_remarks
     * @return $this
     */
    public function setFraudRemarks($fraud_remarks)
    {
        $this->container['fraud_remarks'] = $fraud_remarks;

        return $this;
    }

    /**
     * Gets nin_number
     * @return string
     */
    public function getNinNumber()
    {
        return $this->container['nin_number'];
    }

    /**
     * Sets nin_number
     * @param string $nin_number
     * @return $this
     */
    public function setNinNumber($nin_number)
    {
        $this->container['nin_number'] = $nin_number;

        return $this;
    }

    /**
     * Gets nin_country_code
     * @return string
     */
    public function getNinCountryCode()
    {
        return $this->container['nin_country_code'];
    }

    /**
     * Sets nin_country_code
     * @param string $nin_country_code
     * @return $this
     */
    public function setNinCountryCode($nin_country_code)
    {
        $this->container['nin_country_code'] = $nin_country_code;

        return $this;
    }

    /**
     * Gets nin_gender
     * @return string
     */
    public function getNinGender()
    {
        return $this->container['nin_gender'];
    }

    /**
     * Sets nin_gender
     * @param string $nin_gender
     * @return $this
     */
    public function setNinGender($nin_gender)
    {
        $this->container['nin_gender'] = $nin_gender;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
