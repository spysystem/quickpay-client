<?php
/**
 * PaymentLinkModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * QuickPay
 *
 * QuickPay client to capture and refund payments
 *
 * OpenAPI spec version: v10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PaymentLinkModel Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PaymentLinkModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PaymentLinkModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'agreement_id' => 'int',
        'language' => 'string',
        'amount' => 'float',
        'continue_url' => 'string',
        'cancel_url' => 'string',
        'callback_url' => 'string',
        'payment_methods' => 'string',
        'auto_fee' => 'bool',
        'auto_capture' => 'bool',
        'branding_id' => 'int',
        'google_analytics_client_id' => 'string',
        'google_analytics_tracking_id' => 'string',
        'version' => 'string',
        'acquirer' => 'string',
        'deadline' => 'string',
        'framed' => 'bool',
        'branding_config' => 'object',
        'customer_email' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'agreement_id' => 'agreement_id',
        'language' => 'language',
        'amount' => 'amount',
        'continue_url' => 'continue_url',
        'cancel_url' => 'cancel_url',
        'callback_url' => 'callback_url',
        'payment_methods' => 'payment_methods',
        'auto_fee' => 'auto_fee',
        'auto_capture' => 'auto_capture',
        'branding_id' => 'branding_id',
        'google_analytics_client_id' => 'google_analytics_client_id',
        'google_analytics_tracking_id' => 'google_analytics_tracking_id',
        'version' => 'version',
        'acquirer' => 'acquirer',
        'deadline' => 'deadline',
        'framed' => 'framed',
        'branding_config' => 'branding_config',
        'customer_email' => 'customer_email'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'agreement_id' => 'setAgreementId',
        'language' => 'setLanguage',
        'amount' => 'setAmount',
        'continue_url' => 'setContinueUrl',
        'cancel_url' => 'setCancelUrl',
        'callback_url' => 'setCallbackUrl',
        'payment_methods' => 'setPaymentMethods',
        'auto_fee' => 'setAutoFee',
        'auto_capture' => 'setAutoCapture',
        'branding_id' => 'setBrandingId',
        'google_analytics_client_id' => 'setGoogleAnalyticsClientId',
        'google_analytics_tracking_id' => 'setGoogleAnalyticsTrackingId',
        'version' => 'setVersion',
        'acquirer' => 'setAcquirer',
        'deadline' => 'setDeadline',
        'framed' => 'setFramed',
        'branding_config' => 'setBrandingConfig',
        'customer_email' => 'setCustomerEmail'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'agreement_id' => 'getAgreementId',
        'language' => 'getLanguage',
        'amount' => 'getAmount',
        'continue_url' => 'getContinueUrl',
        'cancel_url' => 'getCancelUrl',
        'callback_url' => 'getCallbackUrl',
        'payment_methods' => 'getPaymentMethods',
        'auto_fee' => 'getAutoFee',
        'auto_capture' => 'getAutoCapture',
        'branding_id' => 'getBrandingId',
        'google_analytics_client_id' => 'getGoogleAnalyticsClientId',
        'google_analytics_tracking_id' => 'getGoogleAnalyticsTrackingId',
        'version' => 'getVersion',
        'acquirer' => 'getAcquirer',
        'deadline' => 'getDeadline',
        'framed' => 'getFramed',
        'branding_config' => 'getBrandingConfig',
        'customer_email' => 'getCustomerEmail'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['agreement_id'] = isset($data['agreement_id']) ? $data['agreement_id'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['continue_url'] = isset($data['continue_url']) ? $data['continue_url'] : null;
        $this->container['cancel_url'] = isset($data['cancel_url']) ? $data['cancel_url'] : null;
        $this->container['callback_url'] = isset($data['callback_url']) ? $data['callback_url'] : null;
        $this->container['payment_methods'] = isset($data['payment_methods']) ? $data['payment_methods'] : null;
        $this->container['auto_fee'] = isset($data['auto_fee']) ? $data['auto_fee'] : null;
        $this->container['auto_capture'] = isset($data['auto_capture']) ? $data['auto_capture'] : null;
        $this->container['branding_id'] = isset($data['branding_id']) ? $data['branding_id'] : null;
        $this->container['google_analytics_client_id'] = isset($data['google_analytics_client_id']) ? $data['google_analytics_client_id'] : null;
        $this->container['google_analytics_tracking_id'] = isset($data['google_analytics_tracking_id']) ? $data['google_analytics_tracking_id'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['acquirer'] = isset($data['acquirer']) ? $data['acquirer'] : null;
        $this->container['deadline'] = isset($data['deadline']) ? $data['deadline'] : null;
        $this->container['framed'] = isset($data['framed']) ? $data['framed'] : null;
        $this->container['branding_config'] = isset($data['branding_config']) ? $data['branding_config'] : null;
        $this->container['customer_email'] = isset($data['customer_email']) ? $data['customer_email'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets agreement_id
     * @return int
     */
    public function getAgreementId()
    {
        return $this->container['agreement_id'];
    }

    /**
     * Sets agreement_id
     * @param int $agreement_id
     * @return $this
     */
    public function setAgreementId($agreement_id)
    {
        $this->container['agreement_id'] = $agreement_id;

        return $this;
    }

    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     * @param string $language
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets amount
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param float $amount
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets continue_url
     * @return string
     */
    public function getContinueUrl()
    {
        return $this->container['continue_url'];
    }

    /**
     * Sets continue_url
     * @param string $continue_url
     * @return $this
     */
    public function setContinueUrl($continue_url)
    {
        $this->container['continue_url'] = $continue_url;

        return $this;
    }

    /**
     * Gets cancel_url
     * @return string
     */
    public function getCancelUrl()
    {
        return $this->container['cancel_url'];
    }

    /**
     * Sets cancel_url
     * @param string $cancel_url
     * @return $this
     */
    public function setCancelUrl($cancel_url)
    {
        $this->container['cancel_url'] = $cancel_url;

        return $this;
    }

    /**
     * Gets callback_url
     * @return string
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     * @param string $callback_url
     * @return $this
     */
    public function setCallbackUrl($callback_url)
    {
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets payment_methods
     * @return string
     */
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     * @param string $payment_methods
     * @return $this
     */
    public function setPaymentMethods($payment_methods)
    {
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets auto_fee
     * @return bool
     */
    public function getAutoFee()
    {
        return $this->container['auto_fee'];
    }

    /**
     * Sets auto_fee
     * @param bool $auto_fee
     * @return $this
     */
    public function setAutoFee($auto_fee)
    {
        $this->container['auto_fee'] = $auto_fee;

        return $this;
    }

    /**
     * Gets auto_capture
     * @return bool
     */
    public function getAutoCapture()
    {
        return $this->container['auto_capture'];
    }

    /**
     * Sets auto_capture
     * @param bool $auto_capture
     * @return $this
     */
    public function setAutoCapture($auto_capture)
    {
        $this->container['auto_capture'] = $auto_capture;

        return $this;
    }

    /**
     * Gets branding_id
     * @return int
     */
    public function getBrandingId()
    {
        return $this->container['branding_id'];
    }

    /**
     * Sets branding_id
     * @param int $branding_id
     * @return $this
     */
    public function setBrandingId($branding_id)
    {
        $this->container['branding_id'] = $branding_id;

        return $this;
    }

    /**
     * Gets google_analytics_client_id
     * @return string
     */
    public function getGoogleAnalyticsClientId()
    {
        return $this->container['google_analytics_client_id'];
    }

    /**
     * Sets google_analytics_client_id
     * @param string $google_analytics_client_id
     * @return $this
     */
    public function setGoogleAnalyticsClientId($google_analytics_client_id)
    {
        $this->container['google_analytics_client_id'] = $google_analytics_client_id;

        return $this;
    }

    /**
     * Gets google_analytics_tracking_id
     * @return string
     */
    public function getGoogleAnalyticsTrackingId()
    {
        return $this->container['google_analytics_tracking_id'];
    }

    /**
     * Sets google_analytics_tracking_id
     * @param string $google_analytics_tracking_id
     * @return $this
     */
    public function setGoogleAnalyticsTrackingId($google_analytics_tracking_id)
    {
        $this->container['google_analytics_tracking_id'] = $google_analytics_tracking_id;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets acquirer
     * @return string
     */
    public function getAcquirer()
    {
        return $this->container['acquirer'];
    }

    /**
     * Sets acquirer
     * @param string $acquirer
     * @return $this
     */
    public function setAcquirer($acquirer)
    {
        $this->container['acquirer'] = $acquirer;

        return $this;
    }

    /**
     * Gets deadline
     * @return string
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     * @param string $deadline
     * @return $this
     */
    public function setDeadline($deadline)
    {
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets framed
     * @return bool
     */
    public function getFramed()
    {
        return $this->container['framed'];
    }

    /**
     * Sets framed
     * @param bool $framed
     * @return $this
     */
    public function setFramed($framed)
    {
        $this->container['framed'] = $framed;

        return $this;
    }

    /**
     * Gets branding_config
     * @return object
     */
    public function getBrandingConfig()
    {
        return $this->container['branding_config'];
    }

    /**
     * Sets branding_config
     * @param object $branding_config
     * @return $this
     */
    public function setBrandingConfig($branding_config)
    {
        $this->container['branding_config'] = $branding_config;

        return $this;
    }

    /**
     * Gets customer_email
     * @return string
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     * @param string $customer_email
     * @return $this
     */
    public function setCustomerEmail($customer_email)
    {
        $this->container['customer_email'] = $customer_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
